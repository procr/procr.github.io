{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/yunjiexi.jpg","path":"img/yunjiexi.jpg","modified":0,"renderable":0},{"_id":"source/favicon.png","path":"favicon.png","modified":0,"renderable":0},{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo-bak.png","path":"css/images/logo-bak.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"952b759a51ac6ed868e7d2f01694d4e36ff11798","modified":1519225764000},{"_id":"source/_posts/from-flag-principle-to-dekker.md","hash":"d4e69aefb795f9e7a417d33b7756598c2d5756e2","modified":1519640592000},{"_id":"source/_posts/blogging-like-a-hacker.md","hash":"e01d7edd09713ae1c500749b9a5b8d2e7ceb2c4c","modified":1519640445000},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1519641231000},{"_id":"source/img/yunjiexi.jpg","hash":"174bc4b5ef65d42763d6e8d7d594ec0ee9521ab3","modified":1519225764000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1519627969000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1519627969000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1519627969000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1519627969000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1519627969000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1519627969000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1519627969000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1519627969000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1519627969000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1519627969000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1519627969000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1519627969000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1519627969000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1519627969000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1519627969000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1519627969000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1519627969000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1519627969000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1519627969000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1519627969000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1519627969000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1519627969000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1519627969000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1519627969000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1519627969000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1519627969000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1519627969000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1519627969000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1519627969000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1519627969000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1519627969000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1519627969000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1519627969000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1519627969000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1519627969000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1519627969000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1519627969000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1519627969000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1519627969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1519627969000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1519627969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1519627969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1519627969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1519627969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1519627969000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1519627969000},{"_id":"themes/minos/.DS_Store","hash":"d15de84d605ce85261fafb6be21d993e591e6e49","modified":1519629475000},{"_id":"themes/minos/.gitignore","hash":"bbe994b5dffd47ea6ad0458525548d5650e043a7","modified":1519629475000},{"_id":"themes/minos/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1519629475000},{"_id":"themes/minos/README.md","hash":"947826ffa33cc7823231c5eed91c39598a771714","modified":1519629475000},{"_id":"themes/minos/_config.yml.example","hash":"1a7bdf1240e8c9b0ff8afe2416fc61691d922f78","modified":1519629475000},{"_id":"themes/minos/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1519629475000},{"_id":"themes/minos/package.json","hash":"6b4e8276c212f5a617dc558548f5b3d1ae0fb1f2","modified":1519629475000},{"_id":"themes/minos/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519629475000},{"_id":"themes/minos/.git/config","hash":"86ce9cdb1395b8347f38abd45a74bbfee3334069","modified":1519629475000},{"_id":"themes/minos/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519629093000},{"_id":"themes/minos/.git/index","hash":"9bddb612fc965a94cf066075948ecb2043867254","modified":1519629475000},{"_id":"themes/minos/.git/packed-refs","hash":"41195c5bb863acafd47f2f3f43e3611945815adf","modified":1519629475000},{"_id":"themes/minos/languages/zh-CN.yml","hash":"c6daf6c25bdddcfa989ff0dd62559ed2ea5f790b","modified":1519629475000},{"_id":"themes/minos/languages/ru.yml","hash":"c0ac1d63913b0caea5494db14e458f7e5a0937c3","modified":1519629475000},{"_id":"themes/minos/languages/en.yml","hash":"7bada5ca0cf685cb21ab64ba6ef2983314fe10c5","modified":1519629475000},{"_id":"themes/minos/layout/archive.ejs","hash":"4479c33517aa70f2714ee820775ff8307a0dd115","modified":1519629475000},{"_id":"themes/minos/layout/category.ejs","hash":"cd17981f9cac718731880148cb17de60d148a75c","modified":1519629475000},{"_id":"themes/minos/layout/about.ejs","hash":"d80fc2c4329b2079e65312689042de6f03312d6e","modified":1519629475000},{"_id":"themes/minos/layout/categories.ejs","hash":"c40b133eb9b8612a2286a83b8d7d2ca344673507","modified":1519629475000},{"_id":"themes/minos/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1519629475000},{"_id":"themes/minos/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1519629475000},{"_id":"themes/minos/layout/layout.ejs","hash":"03c85682322dce721f6a90aa0f0b5d2ed6622a35","modified":1519629475000},{"_id":"themes/minos/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1519629475000},{"_id":"themes/minos/layout/index.ejs","hash":"505555df272ac4dd23e5eae3acb857a457e421b4","modified":1519629475000},{"_id":"themes/minos/layout/tag.ejs","hash":"bcde8c7ce7e21683ca2cba7fcc21ac43c817a9a4","modified":1519629475000},{"_id":"themes/minos/layout/tags.ejs","hash":"cf485e9053f96d69a1e0ce0f8a55c3aa33ebde03","modified":1519629475000},{"_id":"themes/minos/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519629093000},{"_id":"themes/minos/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519629093000},{"_id":"themes/minos/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519629093000},{"_id":"themes/minos/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519629093000},{"_id":"themes/minos/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519629093000},{"_id":"themes/minos/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519629093000},{"_id":"themes/minos/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519629093000},{"_id":"themes/minos/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1519629093000},{"_id":"themes/minos/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519629093000},{"_id":"themes/minos/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1519629093000},{"_id":"themes/minos/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519629093000},{"_id":"themes/minos/.git/logs/HEAD","hash":"060d16d6f86f0871dbaa2c5ab0430786657d63fa","modified":1519629475000},{"_id":"themes/minos/layout/_partial/about-page.ejs","hash":"23a0d62ddf1964f8d48fb234a73d01cdd948928c","modified":1519629475000},{"_id":"themes/minos/_source/about/index.md","hash":"f61be0b26f5ecb076f5fa820db27a558a8863a95","modified":1519629475000},{"_id":"themes/minos/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1519629475000},{"_id":"themes/minos/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1519629475000},{"_id":"themes/minos/layout/_partial/after-footer.ejs","hash":"d8fc7f94cc2fd05fa2180a5c54139f2d3f56ed94","modified":1519629475000},{"_id":"themes/minos/layout/_partial/archive-post.ejs","hash":"9d687d6560e05764d3d57b2948680aa3940332cf","modified":1519629475000},{"_id":"themes/minos/layout/_partial/article.ejs","hash":"eeb275d1221fff483b2b7bb9c0fe34b1b2ee90a2","modified":1519629475000},{"_id":"themes/minos/layout/_partial/archive.ejs","hash":"fb0206d283ae56717eb92f92784271e79b2e208a","modified":1519629475000},{"_id":"themes/minos/layout/_partial/footer.ejs","hash":"9ff7842d55d8707317fbcd00b1b2fac206a21a1a","modified":1519629475000},{"_id":"themes/minos/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1519629475000},{"_id":"themes/minos/layout/_partial/head.ejs","hash":"2c80f62d7bf5e886eaaeb182a4b9babf759cde71","modified":1519629475000},{"_id":"themes/minos/layout/_partial/header.ejs","hash":"3431b84ac8057be6766ad2806dd418b71f5b9787","modified":1519629475000},{"_id":"themes/minos/source/css/_extend.styl","hash":"d31b1c9980353af3c1607ee6caf84835b7322eea","modified":1519629475000},{"_id":"themes/minos/source/css/_variables.styl","hash":"5bb3cfe78ece808ee0b32078535bb3ce69d98065","modified":1519629475000},{"_id":"themes/minos/source/css/style.styl","hash":"6793062670c69b331e786cfb19d5473f82d7d51c","modified":1519629475000},{"_id":"themes/minos/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1519629475000},{"_id":"themes/minos/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1519629475000},{"_id":"themes/minos/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1519629475000},{"_id":"themes/minos/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1519629475000},{"_id":"themes/minos/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1519629475000},{"_id":"themes/minos/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1519629475000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1519629475000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1519629475000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1519629475000},{"_id":"themes/minos/source/js/script.js","hash":"631cc4a69bc1f7903a24544b79b8e6ea68be9243","modified":1519629475000},{"_id":"themes/minos/source/js/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1519629475000},{"_id":"themes/minos/.git/objects/pack/pack-855fb0d102ecc550e836ce8a101c062c781747bc.idx","hash":"69867fe987933dadefdda48b798023944ddb8292","modified":1519629475000},{"_id":"themes/minos/.git/refs/heads/master","hash":"8f90f6ec13a5a6cd5f19b43db024d36916f1f3c5","modified":1519629475000},{"_id":"themes/minos/layout/_partial/post/category.ejs","hash":"28600328d5d2d68b547b59e7ed713cd315a138d8","modified":1519629475000},{"_id":"themes/minos/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1519629475000},{"_id":"themes/minos/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1519629475000},{"_id":"themes/minos/layout/_partial/post/nav.ejs","hash":"573863e2d6a9d637fff4a8e3b2a4cacb65565499","modified":1519629475000},{"_id":"themes/minos/layout/_partial/post/share_addthis.ejs","hash":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1519629475000},{"_id":"themes/minos/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1519629475000},{"_id":"themes/minos/layout/_partial/post/share_jia.ejs","hash":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1519629475000},{"_id":"themes/minos/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1519629475000},{"_id":"themes/minos/source/css/_partial/archive.styl","hash":"f75e3da863fccfebafcae2e76ea6732a927b79f4","modified":1519629475000},{"_id":"themes/minos/source/css/_partial/article.styl","hash":"42ffaa45f8ee22f34f0a560164298e07aa8c24b9","modified":1519629475000},{"_id":"themes/minos/source/css/_partial/custom-layout.styl","hash":"8d922662464bda0ac0b639c40fda2ee196bef5b5","modified":1519629475000},{"_id":"themes/minos/source/css/_partial/fancybox.styl","hash":"46a40e2749e68db0348db2938429fe4ce0f4724e","modified":1519629475000},{"_id":"themes/minos/source/css/_partial/comment.styl","hash":"06fc75428036bd8277a6d3dea4b636a0dac91154","modified":1519629475000},{"_id":"themes/minos/source/css/_partial/footer.styl","hash":"e4e9b6da90a2620f7905b7283e52322bb83d2fdb","modified":1519629475000},{"_id":"themes/minos/source/css/_partial/highlight.styl","hash":"3fb9265868e4cebeaffa155d8825e90311eb3744","modified":1519629475000},{"_id":"themes/minos/source/css/_partial/header.styl","hash":"c0efb35cee449e1721473ba535e635f8ac08b178","modified":1519629475000},{"_id":"themes/minos/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1519629475000},{"_id":"themes/minos/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1519629475000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1519629475000},{"_id":"themes/minos/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1519629475000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1519629475000},{"_id":"themes/minos/source/css/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1519629475000},{"_id":"themes/minos/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1519629475000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1519629475000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1519629475000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1519629475000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1519629475000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/main.css","hash":"ec6a269189b9a8b807fb4e1de6ffd7acc6a7fea8","modified":1519629475000},{"_id":"themes/minos/source/webfonts/source-code-pro/main.css","hash":"e6a0204ff3c501d6248d96e55aa20d0b42b45a79","modified":1519629475000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1519629475000},{"_id":"themes/minos/.git/logs/refs/heads/master","hash":"060d16d6f86f0871dbaa2c5ab0430786657d63fa","modified":1519629475000},{"_id":"themes/minos/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","hash":"fa8cc541ddc3da23a5a90b08e64e4c12944c56a1","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","hash":"703369bb4159f050b38ecc4f52cfadb8e5760775","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","hash":"0c79a0581c3472e6bb29082092ea37d897370473","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","hash":"36225cd511b12ed61f3e3fbad53773119e9dd73e","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","hash":"4da92f4f265caa786469ec415cfa6515d2997943","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5984003d117f49ae596bde0498310ed215ac3aba","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b64d3a0d20efa14e6063070eb30fbdb594bde59c","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","hash":"950d5547dc10d4a1bdb837439fcfc6c68bbe1b02","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","hash":"6f1e434623e2fa20ba8972a6f97dd9c800b56168","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","hash":"0b4aef50c2979164681fa6dfe2c1d6bd6be6bcd3","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","hash":"df9999766ca9ffe9428b139931352cd821526aed","modified":1519629475000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","hash":"3f425d6aee0c07774a10d82dcb742e32b067f217","modified":1519629475000},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1519629475000},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1519629475000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1519629475000},{"_id":"themes/minos/.git/logs/refs/remotes/origin/HEAD","hash":"060d16d6f86f0871dbaa2c5ab0430786657d63fa","modified":1519629475000},{"_id":"themes/minos/.git/objects/pack/pack-855fb0d102ecc550e836ce8a101c062c781747bc.pack","hash":"17b8f76d0efab64cda2039e671e65060e792ad36","modified":1519629475000},{"_id":"themes/minos/_config.yml","hash":"8587b993580393602038d9ed3bf6666667d53f4f","modified":1519639831000},{"_id":"themes/minos/._config.yml.swp","hash":"0461837c520271514bebf2edb27e27a0da6e8ebf","modified":1519639839000},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1519640000000},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1519641231000},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1519641231000},{"_id":"themes/vexo/.gitignore","hash":"37fb9fd49e7f944716efd3284a6bf55adb6dd0c2","modified":1519641144000},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1519641144000},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1519641144000},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1519641144000},{"_id":"themes/vexo/_config.yml","hash":"8175dc0208b813e97f622090ae988d6b6aaa2b44","modified":1519645199000},{"_id":"themes/vexo/package.json","hash":"8852c5a394ac59d219e5bbbcee10d573d33e1fc6","modified":1519641144000},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1519641144000},{"_id":"source/favicon.png","hash":"d3d6f1cf37b766a88334a33554a5389ec0fae09e","modified":1516772411000},{"_id":"themes/vexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1519641144000},{"_id":"themes/vexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519641127000},{"_id":"themes/vexo/.git/config","hash":"9cf891bec062e2138910d9c40051c4d656da1345","modified":1519641144000},{"_id":"themes/vexo/.git/index","hash":"987e98e67590892d7360c081af9d91f0a18f31fc","modified":1519641164000},{"_id":"themes/vexo/.git/packed-refs","hash":"d07ed9ad8e9bcf4a3a8913d708e81237b7609155","modified":1519641144000},{"_id":"themes/vexo/layout/about.ejs","hash":"c8da38fdb6307c406af3e656fc9e219f9e5a4139","modified":1519641144000},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1519641144000},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1519641144000},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1519641144000},{"_id":"themes/vexo/layout/page.ejs","hash":"a886fb7e8a9d70bc971b6dfc7210d4fa2ee671c9","modified":1519641144000},{"_id":"themes/vexo/layout/project.ejs","hash":"666be5c72bac8165e0946428642b36dd3232983e","modified":1519641144000},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1519641144000},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1519641144000},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1519641144000},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1519641144000},{"_id":"themes/vexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519641127000},{"_id":"themes/vexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519641127000},{"_id":"themes/vexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519641127000},{"_id":"themes/vexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519641127000},{"_id":"themes/vexo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519641127000},{"_id":"themes/vexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519641127000},{"_id":"themes/vexo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1519641127000},{"_id":"themes/vexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519641127000},{"_id":"themes/vexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519641127000},{"_id":"themes/vexo/.git/logs/HEAD","hash":"f95bf7c855d49ce9e4ba8e06aea6ffb10a3fe422","modified":1519641144000},{"_id":"themes/vexo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1519641127000},{"_id":"themes/vexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519641127000},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1519641144000},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1519641144000},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"6032a4dcc6224ad916b7898d54e91552c17396ce","modified":1519641144000},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"e544f516b23bc609cc6367190f380c879b935c21","modified":1519641144000},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"90334bd53e232d7b2cc5ae743b377fc5336bcd6b","modified":1519641144000},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1519641144000},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1519641144000},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1519641144000},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1519641144000},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1519641144000},{"_id":"themes/vexo/source/css/_config.styl","hash":"0c9c0e77d6b8813cb76494e8d757843aab9e117b","modified":1519641144000},{"_id":"themes/vexo/source/css/style.styl","hash":"c09ad049c647cc089eaf00aa59e5d5d2a7f782d4","modified":1519641144000},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1519641144000},{"_id":"themes/vexo/source/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1519641144000},{"_id":"themes/vexo/.git/objects/pack/pack-31293f6ce4c0e16ddb4261791a50e3de47379d87.idx","hash":"fbb67706da2a68154498bb51e1dad2d1e2df5db1","modified":1519641144000},{"_id":"themes/vexo/.git/refs/heads/master","hash":"53a832c26baac5e1ae6b97828639427dea818295","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"daf87833ee4923615a67f7893d5ed5abf1ca5e00","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"3ec22606f9548681389158384dc29ddf59c8ceea","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1519641144000},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1519641144000},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1519641144000},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1519641144000},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"9f90c6c516b4c4acc70622ecb0669aef64dee03e","modified":1519643906000},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1519641144000},{"_id":"themes/vexo/source/css/images/logo.png","hash":"f206aecfa90c8dfd3850645058dc8d3a009ef7d5","modified":1519642775000},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1519641144000},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"dd05635d004cbf833fc6e52ca7fcfb47fcb5d62b","modified":1519643892000},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1519641144000},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1519641144000},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1519641144000},{"_id":"themes/vexo/.git/logs/refs/heads/master","hash":"f95bf7c855d49ce9e4ba8e06aea6ffb10a3fe422","modified":1519641144000},{"_id":"themes/vexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1519641144000},{"_id":"themes/vexo/.git/logs/refs/remotes/origin/HEAD","hash":"f95bf7c855d49ce9e4ba8e06aea6ffb10a3fe422","modified":1519641144000},{"_id":"themes/vexo/.git/objects/pack/pack-31293f6ce4c0e16ddb4261791a50e3de47379d87.pack","hash":"542b37b6a8398f42d8d9a337ed5f25f6740c119d","modified":1519641144000},{"_id":"themes/vexo/._config.yml.swp","hash":"f71f195674b5a9af89122f0217beb67d64f291ad","modified":1519642869000},{"_id":"themes/vexo/source/css/.DS_Store","hash":"9f4ac4f4c5a588e774efa52682d570d2032a8a42","modified":1519643774000},{"_id":"themes/vexo/source/css/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1519642497000},{"_id":"themes/vexo/source/css/images/logo-bak.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1519641144000},{"_id":"themes/vexo/.README.md.swp","hash":"226d0f1d7609cdfda765acaa6e4df9481eb18942","modified":1519643585000}],"Category":[],"Data":[],"Page":[{"title":"About","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---","date":"2018-02-26T10:33:51.000Z","updated":"2018-02-26T10:33:51.000Z","path":"about/index.html","_id":"cje3uw2i20008a4qihdcfd2xp","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2018-02-26T10:33:51.000Z","updated":"2018-02-26T10:33:51.000Z","path":"project/index.html","_id":"cje435ik5000263qiryetn90z","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2018-02-26T10:33:51.000Z","updated":"2018-02-26T10:33:51.000Z","path":"tags/index.html","_id":"cje435ik7000363qii4tluwir","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"软件方式的线程互斥方法的实现","date":"2016-02-03T05:46:44.000Z","_content":"\n我们知道在多线程的环境中，对共享资源的互斥控制是必不可少的，最熟悉的方式就是锁。\n\n## 四种同步互斥的控制方法\n- 临界区(critical section)\n- 互斥量(mutex)\n- 信号量(semaphores)\n- 事件驱动(event)\n\n本文将描述一种软件方法实现的临界区控制方法，以及对他的优化。\n\n<!-- more -->\n\n## 场景描述\n在做kvm虚拟化项目的时候，碰到了这样的一个场景：\n\nhypervisor为虚拟机额外分配了1GB的内存空间，虚拟机操作这1GB的内存页会有特殊的行为(不是本文所关注的重点，只需要知道上层和下层会同时操作这内存大小为1GB的，共262,144个4K页)。\n\n- 上层的虚拟机内核会不定期修改某些内存页的内容；\n- 然而下层的虚拟机监控器(kvm or hypervisor)结合当前系统的运行状况，有选择性的对为上层虚拟机分配的内存页做迁移或者调度。\n\n这两者并行执行，如果下层hypervisor进行调度的同时，上层虚拟机内核修改了内存页的内容，可能会导致不一致性。所以在这种场景下，需要对针对某个页的操作进行锁保护。 \n\n具体实现来说，为这些内存页再分配一块内存区域，这块区域由VM和hypervisor共享，实际上这一区域存放一个大数组，数组的每个元素存放一些关于对应下标的内存页的使用信息。\n实际上用已有的spin\\_lock也是可以的，不过spin\\_lock 是用xadd指令实现的，在guest-hypervisor这样的组合中，貌似会有问题，具体问题出现在什么地方还不知道，本文暂不关注。\n\n到这儿，问题简化成：两个线程A和B，同时竞争进入critical section，如何用软件的方式实现互斥。\n\n\n## Flag Principle\n废话不多说，直接上代码：\n```c\nint flag[2] = {0, 0};\n\nvoid process0() {\n    ...\n\nretry0:\n    flag[0] = 1;\n    if (flag[1] == 1) {\n        barrier();\n        flag[0] = 0;\n        goto retry0;\n    }\n\n    // critical section here...\n\n    flag[0] = 0;\n\n    ...\n}\n\nvoid process1() {\n    ...\n\nretry1:\n    flag[1] = 1;\n    if (flag[0] == 1) {\n        barrier();\n        flag[1] = 0;\n        goto retry1;\n    }\n\n    // critical section here...\n\n    flag[1] = 0;\n\n    ...\n}\n```\n\n简单来说，两个线程共享两个flag变量，每一次进入critical section之前，首先置上自己的flag，然后去检查对方的flag，如果对方的flag已经置上，说明对方有可能已经进入、或者等待进入临界区，此时应该将自己的flag置为0，然后进入下一轮尝试。\n\n加上barrier的原因是，编译器会认为进入临界区flag的值永远会是1，这个赋值0的操作是多余的，然后将flag[1] = 0优化掉，这样带来的结果就是：deadlock。\n\n### 缺点\n虽然这个设计能够避免死锁，但是由于flag = 0 与goto retry之后 flag = 1 之间间隔的时间非常短，有非常大的可能造成活锁。有一个简单的解决办法，就是在两个赋值中间加上一个随机的sleep时间，这样能够减缓活锁发生的可能性，不过这并不是好的解决方法。为了避免过分的谦让，我们引入了Dekker算法。\n\n## Dekker 算法\n```c\n\nint flag[2] = {0, 0};\nint turn = 0;\n\nvoid process0() {\n    ...\n\nretry0:\n    flag[0] = 1;\n    if (flag[1] == 1) {\n        if (turn == 1) {\n            barrier();\n            flag[0] = 0;\n            while (turn == 1);\n        }\n        \n        goto retry0;\n    }\n\n    // critical section here...\n\n    turn = 1;\n    flag[0] = 0;\n\n    ...\n}\n\nvoid process1() {\n    ...\n\nretry1:\n    flag[1] = 1;\n    if (flag[0] == 1) {\n        if (turn == 0) {\n            barrier();\n            flag[1] = 0;\n            while (turn == 0);\n        }\n        \n        goto retry1;\n    }\n\n    // critical section here...\n\n    turn = 0;\n    flag[1] = 0;\n\n    ...\n}\n\n```\n\n相比于flag principle，dekker算法加了一个turn的变量，这个变量等于0，表示0线程不必谦让，等于1表示1线程不必谦让。如果双方进入了之前的“活锁”状态，就会根据turn变量来裁决哪一方进入临界区，而另一方则无限循环等待。\n\n## Peterson算法\nPeterson算法看起来更直观，代码也更简洁，原理和dekker无大异。\n```c\nint flag[2] = {0, 0};\nint turn = 0;\n\nvoid process0() {\n    ...\n\n    flag[0] = 1;\n    turn = 1;\n    while(flag[1] && turn==1);\n\n    // critical section here...\n\n    flag[0] = 0;\n\n    ...\n}\n\nvoid process1() {\n    ...\n\n    flag[1] = 1;\n    turn = 0;\n    while(flag[0] && turn==0);\n\n    // critical section here...\n\n    flag[1] = 0;\n\n    ...\n}\n```\n\n并且这个算法有一个好处，能够比较容易地扩展成N线程的情况。\n\n## Filter算法\n扩展成N个线程同时访问一个资源的filter算法，伪代码如下：\n```c\n// initialization\nwaiting[N-1] = { -1 }; // the waiting process of each level 0...N-2\nlevel[N] = { -1 };     // current level of processes 0...N-1\n\n// code for process #i\nfor(l = 0; l < N-1; ++l) {\n    level[i] = l;\n    waiting[l] = i;\n    while(waiting[l] == i &&\n          (there exists k ≠ i, such that level[k] ≥ l)) {\n        // busy wait\n    }\n}\n\n// critical section\n\nlevel[i] = -1; // exit section\n```\n\n其中waiting数组类似于一个等待的房间，所有的线程想要进入critical section，就必须从小到大经过所有的房间，最坏的情况是N的线程有N-1个呆在房间里面等待，只有一个线程进入critical section。\n\n对于level数组，表示的是每一个线程在第几个房间等待。例如 level[i] = j; 表示第 i 个线程在房间 j 等待。另外 -1 表示没有进入critical section的请求。\n\n我们可以看出代码最核心的一段while判断，如果某个房间是的等待着是当前的线程，并且已经有别的线程在序号更大的房间了，那么就继续等待。由此可见，有两种方式能够让当前线程向前进：\n\n1. 前方没有别的线程在更大的房间里面等待，则可以向前推进。\n2. 有别的后来者线程也想进入我当前的房间，并且把waiting号给改了，这样当前线程就被动地被推进到下一级的房间。\n\n由filter算法去反思Peterson算法，可见其中的flags数组表示两个进程的等待级别，而turn变量则是阻塞（忙等待）的线程队列，这个队列只需要容纳一个元素。\n\n\n\n## 结语\n\n事实上，软件方法实现的临界区算法有一个最大的问题就是没有拿到入场券的线程将会无意义地等待，这也是软件互斥方法无法避免的一个通病，不过在之前所描述的场景下，dekker算法是比较好的解决方案了。\n\n---END---\n","source":"_posts/from-flag-principle-to-dekker.md","raw":"---\ntitle: 软件方式的线程互斥方法的实现\ndate: 2016-02-03 13:46:44\ntags: [锁, 虚拟化]\n---\n\n我们知道在多线程的环境中，对共享资源的互斥控制是必不可少的，最熟悉的方式就是锁。\n\n## 四种同步互斥的控制方法\n- 临界区(critical section)\n- 互斥量(mutex)\n- 信号量(semaphores)\n- 事件驱动(event)\n\n本文将描述一种软件方法实现的临界区控制方法，以及对他的优化。\n\n<!-- more -->\n\n## 场景描述\n在做kvm虚拟化项目的时候，碰到了这样的一个场景：\n\nhypervisor为虚拟机额外分配了1GB的内存空间，虚拟机操作这1GB的内存页会有特殊的行为(不是本文所关注的重点，只需要知道上层和下层会同时操作这内存大小为1GB的，共262,144个4K页)。\n\n- 上层的虚拟机内核会不定期修改某些内存页的内容；\n- 然而下层的虚拟机监控器(kvm or hypervisor)结合当前系统的运行状况，有选择性的对为上层虚拟机分配的内存页做迁移或者调度。\n\n这两者并行执行，如果下层hypervisor进行调度的同时，上层虚拟机内核修改了内存页的内容，可能会导致不一致性。所以在这种场景下，需要对针对某个页的操作进行锁保护。 \n\n具体实现来说，为这些内存页再分配一块内存区域，这块区域由VM和hypervisor共享，实际上这一区域存放一个大数组，数组的每个元素存放一些关于对应下标的内存页的使用信息。\n实际上用已有的spin\\_lock也是可以的，不过spin\\_lock 是用xadd指令实现的，在guest-hypervisor这样的组合中，貌似会有问题，具体问题出现在什么地方还不知道，本文暂不关注。\n\n到这儿，问题简化成：两个线程A和B，同时竞争进入critical section，如何用软件的方式实现互斥。\n\n\n## Flag Principle\n废话不多说，直接上代码：\n```c\nint flag[2] = {0, 0};\n\nvoid process0() {\n    ...\n\nretry0:\n    flag[0] = 1;\n    if (flag[1] == 1) {\n        barrier();\n        flag[0] = 0;\n        goto retry0;\n    }\n\n    // critical section here...\n\n    flag[0] = 0;\n\n    ...\n}\n\nvoid process1() {\n    ...\n\nretry1:\n    flag[1] = 1;\n    if (flag[0] == 1) {\n        barrier();\n        flag[1] = 0;\n        goto retry1;\n    }\n\n    // critical section here...\n\n    flag[1] = 0;\n\n    ...\n}\n```\n\n简单来说，两个线程共享两个flag变量，每一次进入critical section之前，首先置上自己的flag，然后去检查对方的flag，如果对方的flag已经置上，说明对方有可能已经进入、或者等待进入临界区，此时应该将自己的flag置为0，然后进入下一轮尝试。\n\n加上barrier的原因是，编译器会认为进入临界区flag的值永远会是1，这个赋值0的操作是多余的，然后将flag[1] = 0优化掉，这样带来的结果就是：deadlock。\n\n### 缺点\n虽然这个设计能够避免死锁，但是由于flag = 0 与goto retry之后 flag = 1 之间间隔的时间非常短，有非常大的可能造成活锁。有一个简单的解决办法，就是在两个赋值中间加上一个随机的sleep时间，这样能够减缓活锁发生的可能性，不过这并不是好的解决方法。为了避免过分的谦让，我们引入了Dekker算法。\n\n## Dekker 算法\n```c\n\nint flag[2] = {0, 0};\nint turn = 0;\n\nvoid process0() {\n    ...\n\nretry0:\n    flag[0] = 1;\n    if (flag[1] == 1) {\n        if (turn == 1) {\n            barrier();\n            flag[0] = 0;\n            while (turn == 1);\n        }\n        \n        goto retry0;\n    }\n\n    // critical section here...\n\n    turn = 1;\n    flag[0] = 0;\n\n    ...\n}\n\nvoid process1() {\n    ...\n\nretry1:\n    flag[1] = 1;\n    if (flag[0] == 1) {\n        if (turn == 0) {\n            barrier();\n            flag[1] = 0;\n            while (turn == 0);\n        }\n        \n        goto retry1;\n    }\n\n    // critical section here...\n\n    turn = 0;\n    flag[1] = 0;\n\n    ...\n}\n\n```\n\n相比于flag principle，dekker算法加了一个turn的变量，这个变量等于0，表示0线程不必谦让，等于1表示1线程不必谦让。如果双方进入了之前的“活锁”状态，就会根据turn变量来裁决哪一方进入临界区，而另一方则无限循环等待。\n\n## Peterson算法\nPeterson算法看起来更直观，代码也更简洁，原理和dekker无大异。\n```c\nint flag[2] = {0, 0};\nint turn = 0;\n\nvoid process0() {\n    ...\n\n    flag[0] = 1;\n    turn = 1;\n    while(flag[1] && turn==1);\n\n    // critical section here...\n\n    flag[0] = 0;\n\n    ...\n}\n\nvoid process1() {\n    ...\n\n    flag[1] = 1;\n    turn = 0;\n    while(flag[0] && turn==0);\n\n    // critical section here...\n\n    flag[1] = 0;\n\n    ...\n}\n```\n\n并且这个算法有一个好处，能够比较容易地扩展成N线程的情况。\n\n## Filter算法\n扩展成N个线程同时访问一个资源的filter算法，伪代码如下：\n```c\n// initialization\nwaiting[N-1] = { -1 }; // the waiting process of each level 0...N-2\nlevel[N] = { -1 };     // current level of processes 0...N-1\n\n// code for process #i\nfor(l = 0; l < N-1; ++l) {\n    level[i] = l;\n    waiting[l] = i;\n    while(waiting[l] == i &&\n          (there exists k ≠ i, such that level[k] ≥ l)) {\n        // busy wait\n    }\n}\n\n// critical section\n\nlevel[i] = -1; // exit section\n```\n\n其中waiting数组类似于一个等待的房间，所有的线程想要进入critical section，就必须从小到大经过所有的房间，最坏的情况是N的线程有N-1个呆在房间里面等待，只有一个线程进入critical section。\n\n对于level数组，表示的是每一个线程在第几个房间等待。例如 level[i] = j; 表示第 i 个线程在房间 j 等待。另外 -1 表示没有进入critical section的请求。\n\n我们可以看出代码最核心的一段while判断，如果某个房间是的等待着是当前的线程，并且已经有别的线程在序号更大的房间了，那么就继续等待。由此可见，有两种方式能够让当前线程向前进：\n\n1. 前方没有别的线程在更大的房间里面等待，则可以向前推进。\n2. 有别的后来者线程也想进入我当前的房间，并且把waiting号给改了，这样当前线程就被动地被推进到下一级的房间。\n\n由filter算法去反思Peterson算法，可见其中的flags数组表示两个进程的等待级别，而turn变量则是阻塞（忙等待）的线程队列，这个队列只需要容纳一个元素。\n\n\n\n## 结语\n\n事实上，软件方法实现的临界区算法有一个最大的问题就是没有拿到入场券的线程将会无意义地等待，这也是软件互斥方法无法避免的一个通病，不过在之前所描述的场景下，dekker算法是比较好的解决方案了。\n\n---END---\n","slug":"from-flag-principle-to-dekker","published":1,"updated":"2018-02-26T10:23:12.000Z","_id":"cje3uw2hv0000a4qilujwdv8w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们知道在多线程的环境中，对共享资源的互斥控制是必不可少的，最熟悉的方式就是锁。</p>\n<h2 id=\"四种同步互斥的控制方法\"><a href=\"#四种同步互斥的控制方法\" class=\"headerlink\" title=\"四种同步互斥的控制方法\"></a>四种同步互斥的控制方法</h2><ul>\n<li>临界区(critical section)</li>\n<li>互斥量(mutex)</li>\n<li>信号量(semaphores)</li>\n<li>事件驱动(event)</li>\n</ul>\n<p>本文将描述一种软件方法实现的临界区控制方法，以及对他的优化。</p>\n<a id=\"more\"></a>\n<h2 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h2><p>在做kvm虚拟化项目的时候，碰到了这样的一个场景：</p>\n<p>hypervisor为虚拟机额外分配了1GB的内存空间，虚拟机操作这1GB的内存页会有特殊的行为(不是本文所关注的重点，只需要知道上层和下层会同时操作这内存大小为1GB的，共262,144个4K页)。</p>\n<ul>\n<li>上层的虚拟机内核会不定期修改某些内存页的内容；</li>\n<li>然而下层的虚拟机监控器(kvm or hypervisor)结合当前系统的运行状况，有选择性的对为上层虚拟机分配的内存页做迁移或者调度。</li>\n</ul>\n<p>这两者并行执行，如果下层hypervisor进行调度的同时，上层虚拟机内核修改了内存页的内容，可能会导致不一致性。所以在这种场景下，需要对针对某个页的操作进行锁保护。 </p>\n<p>具体实现来说，为这些内存页再分配一块内存区域，这块区域由VM和hypervisor共享，实际上这一区域存放一个大数组，数组的每个元素存放一些关于对应下标的内存页的使用信息。<br>实际上用已有的spin_lock也是可以的，不过spin_lock 是用xadd指令实现的，在guest-hypervisor这样的组合中，貌似会有问题，具体问题出现在什么地方还不知道，本文暂不关注。</p>\n<p>到这儿，问题简化成：两个线程A和B，同时竞争进入critical section，如何用软件的方式实现互斥。</p>\n<h2 id=\"Flag-Principle\"><a href=\"#Flag-Principle\" class=\"headerlink\" title=\"Flag Principle\"></a>Flag Principle</h2><p>废话不多说，直接上代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> flag[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">retry0:</span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag[<span class=\"number\">1</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        barrier();</span><br><span class=\"line\">        flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">retry1:</span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        barrier();</span><br><span class=\"line\">        flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>简单来说，两个线程共享两个flag变量，每一次进入critical section之前，首先置上自己的flag，然后去检查对方的flag，如果对方的flag已经置上，说明对方有可能已经进入、或者等待进入临界区，此时应该将自己的flag置为0，然后进入下一轮尝试。</p>\n<p>加上barrier的原因是，编译器会认为进入临界区flag的值永远会是1，这个赋值0的操作是多余的，然后将flag[1] = 0优化掉，这样带来的结果就是：deadlock。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>虽然这个设计能够避免死锁，但是由于flag = 0 与goto retry之后 flag = 1 之间间隔的时间非常短，有非常大的可能造成活锁。有一个简单的解决办法，就是在两个赋值中间加上一个随机的sleep时间，这样能够减缓活锁发生的可能性，不过这并不是好的解决方法。为了避免过分的谦让，我们引入了Dekker算法。</p>\n<h2 id=\"Dekker-算法\"><a href=\"#Dekker-算法\" class=\"headerlink\" title=\"Dekker 算法\"></a>Dekker 算法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> flag[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> turn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">retry0:</span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag[<span class=\"number\">1</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (turn == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            barrier();</span><br><span class=\"line\">            flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (turn == <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    turn = <span class=\"number\">1</span>;</span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">retry1:</span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (turn == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            barrier();</span><br><span class=\"line\">            flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (turn == <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    turn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比于flag principle，dekker算法加了一个turn的变量，这个变量等于0，表示0线程不必谦让，等于1表示1线程不必谦让。如果双方进入了之前的“活锁”状态，就会根据turn变量来裁决哪一方进入临界区，而另一方则无限循环等待。</p>\n<h2 id=\"Peterson算法\"><a href=\"#Peterson算法\" class=\"headerlink\" title=\"Peterson算法\"></a>Peterson算法</h2><p>Peterson算法看起来更直观，代码也更简洁，原理和dekker无大异。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> flag[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> turn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    turn = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(flag[<span class=\"number\">1</span>] &amp;&amp; turn==<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    turn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(flag[<span class=\"number\">0</span>] &amp;&amp; turn==<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>并且这个算法有一个好处，能够比较容易地扩展成N线程的情况。</p>\n<h2 id=\"Filter算法\"><a href=\"#Filter算法\" class=\"headerlink\" title=\"Filter算法\"></a>Filter算法</h2><p>扩展成N个线程同时访问一个资源的filter算法，伪代码如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// initialization</span></span><br><span class=\"line\">waiting[N<span class=\"number\">-1</span>] = &#123; <span class=\"number\">-1</span> &#125;; <span class=\"comment\">// the waiting process of each level 0...N-2</span></span><br><span class=\"line\">level[N] = &#123; <span class=\"number\">-1</span> &#125;;     <span class=\"comment\">// current level of processes 0...N-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// code for process #i</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(l = <span class=\"number\">0</span>; l &lt; N<span class=\"number\">-1</span>; ++l) &#123;</span><br><span class=\"line\">    level[i] = l;</span><br><span class=\"line\">    waiting[l] = i;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(waiting[l] == i &amp;&amp;</span><br><span class=\"line\">          (there exists k ≠ i, such that level[k] ≥ l)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// busy wait</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// critical section</span></span><br><span class=\"line\"></span><br><span class=\"line\">level[i] = <span class=\"number\">-1</span>; <span class=\"comment\">// exit section</span></span><br></pre></td></tr></table></figure></p>\n<p>其中waiting数组类似于一个等待的房间，所有的线程想要进入critical section，就必须从小到大经过所有的房间，最坏的情况是N的线程有N-1个呆在房间里面等待，只有一个线程进入critical section。</p>\n<p>对于level数组，表示的是每一个线程在第几个房间等待。例如 level[i] = j; 表示第 i 个线程在房间 j 等待。另外 -1 表示没有进入critical section的请求。</p>\n<p>我们可以看出代码最核心的一段while判断，如果某个房间是的等待着是当前的线程，并且已经有别的线程在序号更大的房间了，那么就继续等待。由此可见，有两种方式能够让当前线程向前进：</p>\n<ol>\n<li>前方没有别的线程在更大的房间里面等待，则可以向前推进。</li>\n<li>有别的后来者线程也想进入我当前的房间，并且把waiting号给改了，这样当前线程就被动地被推进到下一级的房间。</li>\n</ol>\n<p>由filter算法去反思Peterson算法，可见其中的flags数组表示两个进程的等待级别，而turn变量则是阻塞（忙等待）的线程队列，这个队列只需要容纳一个元素。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>事实上，软件方法实现的临界区算法有一个最大的问题就是没有拿到入场券的线程将会无意义地等待，这也是软件互斥方法无法避免的一个通病，不过在之前所描述的场景下，dekker算法是比较好的解决方案了。</p>\n<p>—END—</p>\n","site":{"data":{}},"excerpt":"<p>我们知道在多线程的环境中，对共享资源的互斥控制是必不可少的，最熟悉的方式就是锁。</p>\n<h2 id=\"四种同步互斥的控制方法\"><a href=\"#四种同步互斥的控制方法\" class=\"headerlink\" title=\"四种同步互斥的控制方法\"></a>四种同步互斥的控制方法</h2><ul>\n<li>临界区(critical section)</li>\n<li>互斥量(mutex)</li>\n<li>信号量(semaphores)</li>\n<li>事件驱动(event)</li>\n</ul>\n<p>本文将描述一种软件方法实现的临界区控制方法，以及对他的优化。</p>","more":"<h2 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h2><p>在做kvm虚拟化项目的时候，碰到了这样的一个场景：</p>\n<p>hypervisor为虚拟机额外分配了1GB的内存空间，虚拟机操作这1GB的内存页会有特殊的行为(不是本文所关注的重点，只需要知道上层和下层会同时操作这内存大小为1GB的，共262,144个4K页)。</p>\n<ul>\n<li>上层的虚拟机内核会不定期修改某些内存页的内容；</li>\n<li>然而下层的虚拟机监控器(kvm or hypervisor)结合当前系统的运行状况，有选择性的对为上层虚拟机分配的内存页做迁移或者调度。</li>\n</ul>\n<p>这两者并行执行，如果下层hypervisor进行调度的同时，上层虚拟机内核修改了内存页的内容，可能会导致不一致性。所以在这种场景下，需要对针对某个页的操作进行锁保护。 </p>\n<p>具体实现来说，为这些内存页再分配一块内存区域，这块区域由VM和hypervisor共享，实际上这一区域存放一个大数组，数组的每个元素存放一些关于对应下标的内存页的使用信息。<br>实际上用已有的spin_lock也是可以的，不过spin_lock 是用xadd指令实现的，在guest-hypervisor这样的组合中，貌似会有问题，具体问题出现在什么地方还不知道，本文暂不关注。</p>\n<p>到这儿，问题简化成：两个线程A和B，同时竞争进入critical section，如何用软件的方式实现互斥。</p>\n<h2 id=\"Flag-Principle\"><a href=\"#Flag-Principle\" class=\"headerlink\" title=\"Flag Principle\"></a>Flag Principle</h2><p>废话不多说，直接上代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> flag[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">retry0:</span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag[<span class=\"number\">1</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        barrier();</span><br><span class=\"line\">        flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">retry1:</span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        barrier();</span><br><span class=\"line\">        flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>简单来说，两个线程共享两个flag变量，每一次进入critical section之前，首先置上自己的flag，然后去检查对方的flag，如果对方的flag已经置上，说明对方有可能已经进入、或者等待进入临界区，此时应该将自己的flag置为0，然后进入下一轮尝试。</p>\n<p>加上barrier的原因是，编译器会认为进入临界区flag的值永远会是1，这个赋值0的操作是多余的，然后将flag[1] = 0优化掉，这样带来的结果就是：deadlock。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>虽然这个设计能够避免死锁，但是由于flag = 0 与goto retry之后 flag = 1 之间间隔的时间非常短，有非常大的可能造成活锁。有一个简单的解决办法，就是在两个赋值中间加上一个随机的sleep时间，这样能够减缓活锁发生的可能性，不过这并不是好的解决方法。为了避免过分的谦让，我们引入了Dekker算法。</p>\n<h2 id=\"Dekker-算法\"><a href=\"#Dekker-算法\" class=\"headerlink\" title=\"Dekker 算法\"></a>Dekker 算法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> flag[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> turn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">retry0:</span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag[<span class=\"number\">1</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (turn == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            barrier();</span><br><span class=\"line\">            flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (turn == <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    turn = <span class=\"number\">1</span>;</span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">retry1:</span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (turn == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            barrier();</span><br><span class=\"line\">            flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (turn == <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    turn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比于flag principle，dekker算法加了一个turn的变量，这个变量等于0，表示0线程不必谦让，等于1表示1线程不必谦让。如果双方进入了之前的“活锁”状态，就会根据turn变量来裁决哪一方进入临界区，而另一方则无限循环等待。</p>\n<h2 id=\"Peterson算法\"><a href=\"#Peterson算法\" class=\"headerlink\" title=\"Peterson算法\"></a>Peterson算法</h2><p>Peterson算法看起来更直观，代码也更简洁，原理和dekker无大异。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> flag[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> turn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process0</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    turn = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(flag[<span class=\"number\">1</span>] &amp;&amp; turn==<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    turn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(flag[<span class=\"number\">0</span>] &amp;&amp; turn==<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// critical section here...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>并且这个算法有一个好处，能够比较容易地扩展成N线程的情况。</p>\n<h2 id=\"Filter算法\"><a href=\"#Filter算法\" class=\"headerlink\" title=\"Filter算法\"></a>Filter算法</h2><p>扩展成N个线程同时访问一个资源的filter算法，伪代码如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// initialization</span></span><br><span class=\"line\">waiting[N<span class=\"number\">-1</span>] = &#123; <span class=\"number\">-1</span> &#125;; <span class=\"comment\">// the waiting process of each level 0...N-2</span></span><br><span class=\"line\">level[N] = &#123; <span class=\"number\">-1</span> &#125;;     <span class=\"comment\">// current level of processes 0...N-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// code for process #i</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(l = <span class=\"number\">0</span>; l &lt; N<span class=\"number\">-1</span>; ++l) &#123;</span><br><span class=\"line\">    level[i] = l;</span><br><span class=\"line\">    waiting[l] = i;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(waiting[l] == i &amp;&amp;</span><br><span class=\"line\">          (there exists k ≠ i, such that level[k] ≥ l)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// busy wait</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// critical section</span></span><br><span class=\"line\"></span><br><span class=\"line\">level[i] = <span class=\"number\">-1</span>; <span class=\"comment\">// exit section</span></span><br></pre></td></tr></table></figure></p>\n<p>其中waiting数组类似于一个等待的房间，所有的线程想要进入critical section，就必须从小到大经过所有的房间，最坏的情况是N的线程有N-1个呆在房间里面等待，只有一个线程进入critical section。</p>\n<p>对于level数组，表示的是每一个线程在第几个房间等待。例如 level[i] = j; 表示第 i 个线程在房间 j 等待。另外 -1 表示没有进入critical section的请求。</p>\n<p>我们可以看出代码最核心的一段while判断，如果某个房间是的等待着是当前的线程，并且已经有别的线程在序号更大的房间了，那么就继续等待。由此可见，有两种方式能够让当前线程向前进：</p>\n<ol>\n<li>前方没有别的线程在更大的房间里面等待，则可以向前推进。</li>\n<li>有别的后来者线程也想进入我当前的房间，并且把waiting号给改了，这样当前线程就被动地被推进到下一级的房间。</li>\n</ol>\n<p>由filter算法去反思Peterson算法，可见其中的flags数组表示两个进程的等待级别，而turn变量则是阻塞（忙等待）的线程队列，这个队列只需要容纳一个元素。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>事实上，软件方法实现的临界区算法有一个最大的问题就是没有拿到入场券的线程将会无意义地等待，这也是软件互斥方法无法避免的一个通病，不过在之前所描述的场景下，dekker算法是比较好的解决方案了。</p>\n<p>—END—</p>"},{"title":"Blogging like a hacker","date":"2016-01-29T16:00:00.000Z","_content":"\n这是许久以来终于下定决心开始写的第一篇博客，回首往事，这种懒惰拖延又不精致的生活已经困扰了我好几年，希望这个博客将会是一个好的开始。\n\n博文主要会集中描述的方面可能会有：生活，旅行，以及计算机相关的技术。\n\n为什么取这个名字，也许是因为当时最近搭建这个博客的时候，正在单曲循环周杰伦的《手写的从前》，发现这挺符合这个博客想要达到的目的。\n\n另外，这篇博客会简单描述一下是如何搭建的。\n\n<!-- more -->\n\n\n## Quick Start\n\n### Hexo\n\n常用的几个指令\n``` bash\nhexo s(erver):      本地server\nhexo clean:         清除 public/\nhexo g(enerate):    生成静态文件\nhexo d(eploy):      部署到相对应的网站（比如github pages）\nhexo g -d:          生成静态文件并且部署\n```\nMore info: [hexo](https://hexo.io/zh-cn/)\n\n### 域名重定向\n\n搭建在github pages上的博客，访问地址一般都类似 procr.github.io，先在hexo模板的source文件夹下，放入CNAME文件，在里面写上\n\n```bash\nprocr.cn\n```\n\n这告诉github pages，当访问procr.github.io这个网址的时候，会重定向到procr.cn\n\n另外，在云解析供应商（万网），填入如下的信息：\n![万网云解析](/img/yunjiexi.jpg \"万网云解析\")\n\n接下来就是漫长的等待，一般需要72h以内。\n\nTODO：\n之后会写一下这个A记录等是啥意思，其实至今不是很理解。\n","source":"_posts/blogging-like-a-hacker.md","raw":"---\ntitle: Blogging like a hacker\ndate: 2016-01-30\ntag: 随笔\n---\n\n这是许久以来终于下定决心开始写的第一篇博客，回首往事，这种懒惰拖延又不精致的生活已经困扰了我好几年，希望这个博客将会是一个好的开始。\n\n博文主要会集中描述的方面可能会有：生活，旅行，以及计算机相关的技术。\n\n为什么取这个名字，也许是因为当时最近搭建这个博客的时候，正在单曲循环周杰伦的《手写的从前》，发现这挺符合这个博客想要达到的目的。\n\n另外，这篇博客会简单描述一下是如何搭建的。\n\n<!-- more -->\n\n\n## Quick Start\n\n### Hexo\n\n常用的几个指令\n``` bash\nhexo s(erver):      本地server\nhexo clean:         清除 public/\nhexo g(enerate):    生成静态文件\nhexo d(eploy):      部署到相对应的网站（比如github pages）\nhexo g -d:          生成静态文件并且部署\n```\nMore info: [hexo](https://hexo.io/zh-cn/)\n\n### 域名重定向\n\n搭建在github pages上的博客，访问地址一般都类似 procr.github.io，先在hexo模板的source文件夹下，放入CNAME文件，在里面写上\n\n```bash\nprocr.cn\n```\n\n这告诉github pages，当访问procr.github.io这个网址的时候，会重定向到procr.cn\n\n另外，在云解析供应商（万网），填入如下的信息：\n![万网云解析](/img/yunjiexi.jpg \"万网云解析\")\n\n接下来就是漫长的等待，一般需要72h以内。\n\nTODO：\n之后会写一下这个A记录等是啥意思，其实至今不是很理解。\n","slug":"blogging-like-a-hacker","published":1,"updated":"2018-02-26T10:20:45.000Z","_id":"cje3uw2hy0001a4qizplxydjh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是许久以来终于下定决心开始写的第一篇博客，回首往事，这种懒惰拖延又不精致的生活已经困扰了我好几年，希望这个博客将会是一个好的开始。</p>\n<p>博文主要会集中描述的方面可能会有：生活，旅行，以及计算机相关的技术。</p>\n<p>为什么取这个名字，也许是因为当时最近搭建这个博客的时候，正在单曲循环周杰伦的《手写的从前》，发现这挺符合这个博客想要达到的目的。</p>\n<p>另外，这篇博客会简单描述一下是如何搭建的。</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p>常用的几个指令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s(erver):      本地server</span><br><span class=\"line\">hexo clean:         清除 public/</span><br><span class=\"line\">hexo g(enerate):    生成静态文件</span><br><span class=\"line\">hexo d(eploy):      部署到相对应的网站（比如github pages）</span><br><span class=\"line\">hexo g -d:          生成静态文件并且部署</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a></p>\n<h3 id=\"域名重定向\"><a href=\"#域名重定向\" class=\"headerlink\" title=\"域名重定向\"></a>域名重定向</h3><p>搭建在github pages上的博客，访问地址一般都类似 procr.github.io，先在hexo模板的source文件夹下，放入CNAME文件，在里面写上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">procr.cn</span><br></pre></td></tr></table></figure>\n<p>这告诉github pages，当访问procr.github.io这个网址的时候，会重定向到procr.cn</p>\n<p>另外，在云解析供应商（万网），填入如下的信息：<br><img src=\"/img/yunjiexi.jpg\" alt=\"万网云解析\" title=\"万网云解析\"></p>\n<p>接下来就是漫长的等待，一般需要72h以内。</p>\n<p>TODO：<br>之后会写一下这个A记录等是啥意思，其实至今不是很理解。</p>\n","site":{"data":{}},"excerpt":"<p>这是许久以来终于下定决心开始写的第一篇博客，回首往事，这种懒惰拖延又不精致的生活已经困扰了我好几年，希望这个博客将会是一个好的开始。</p>\n<p>博文主要会集中描述的方面可能会有：生活，旅行，以及计算机相关的技术。</p>\n<p>为什么取这个名字，也许是因为当时最近搭建这个博客的时候，正在单曲循环周杰伦的《手写的从前》，发现这挺符合这个博客想要达到的目的。</p>\n<p>另外，这篇博客会简单描述一下是如何搭建的。</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p>常用的几个指令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s(erver):      本地server</span><br><span class=\"line\">hexo clean:         清除 public/</span><br><span class=\"line\">hexo g(enerate):    生成静态文件</span><br><span class=\"line\">hexo d(eploy):      部署到相对应的网站（比如github pages）</span><br><span class=\"line\">hexo g -d:          生成静态文件并且部署</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a></p>\n<h3 id=\"域名重定向\"><a href=\"#域名重定向\" class=\"headerlink\" title=\"域名重定向\"></a>域名重定向</h3><p>搭建在github pages上的博客，访问地址一般都类似 procr.github.io，先在hexo模板的source文件夹下，放入CNAME文件，在里面写上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">procr.cn</span><br></pre></td></tr></table></figure>\n<p>这告诉github pages，当访问procr.github.io这个网址的时候，会重定向到procr.cn</p>\n<p>另外，在云解析供应商（万网），填入如下的信息：<br><img src=\"/img/yunjiexi.jpg\" alt=\"万网云解析\" title=\"万网云解析\"></p>\n<p>接下来就是漫长的等待，一般需要72h以内。</p>\n<p>TODO：<br>之后会写一下这个A记录等是啥意思，其实至今不是很理解。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cje3uw2hv0000a4qilujwdv8w","tag_id":"cje3uw2hz0002a4qijdsuyz33","_id":"cje3uw2i10005a4qirx5m5bwa"},{"post_id":"cje3uw2hv0000a4qilujwdv8w","tag_id":"cje3uw2i00003a4qi805xmflp","_id":"cje3uw2i10006a4qixvw28dzr"},{"post_id":"cje3uw2hy0001a4qizplxydjh","tag_id":"cje3uw2i00004a4qittk9ifqu","_id":"cje3uw2i10007a4qilcggglb1"}],"Tag":[{"name":"锁","_id":"cje3uw2hz0002a4qijdsuyz33"},{"name":"虚拟化","_id":"cje3uw2i00003a4qi805xmflp"},{"name":"随笔","_id":"cje3uw2i00004a4qittk9ifqu"}]}}